{"version":3,"sources":["randomizer.js","reportWebVitals.js","index.js"],"names":["Quote","this","props","randomQuote","React","Component","RandomQuoteGenerator","tweetThis","y","state","quote","person","randomizer","bind","QUOTES","quotes","QLENGTH","Object","keys","length","position","min","max","Math","floor","random","randomSubArray","entries","randomPerson","setState","x","Array","isArray","randomPosition","id","onClick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAIMA,G,6KAEF,OAAO,8BAAMC,KAAKC,MAAMC,kB,GAFRC,IAAMC,YA6EXC,E,kDAtEb,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IAmCRK,UAAY,SAAUC,GACpB,OAAOA,GAnCP,EAAKC,MAAQ,CACXC,MAAO,GACPC,OAAQ,IAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKN,UAAY,EAAKA,UAAUM,KAAf,gBAPA,E,yDAWjB,IAAMC,EAASC,EACTC,EAAUC,OAAOC,KAAKJ,GAAQK,OAAS,EAGzCC,EAAW,SAA+BC,EAAKC,GACjD,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGlDK,EAAiBT,OAAOU,QAAQb,GAAQM,EAAS,EAAGJ,IACpDY,EAAeF,EAAe,GAUlCzB,KAAK4B,SAAS,CACZnB,MAVgB,SAAUoB,GAC1B,GAAKC,MAAMC,QAAQF,EAAE,IAEd,CACL,IAAIX,EAASW,EAAE,GAAGX,OAAS,EACvBc,EAAiBb,EAAS,EAAGD,GACjC,OAAOW,EAAE,GAAGG,GAJZ,OAAOH,EAAE,GAQJ3B,CAAYuB,GACnBf,OAAQiB,M,0CASV,OAAO3B,KAAKW,e,+BAIZ,OACE,sBAAKsB,GAAG,YAAR,UACE,qCACE,cAAC,EAAD,CAAOA,GAAG,OAAO/B,YAAaF,KAAKQ,MAAMC,UAE3C,cAAC,EAAD,CAAOwB,GAAG,SAAS/B,YAAW,YAAOF,KAAKQ,MAAME,UAChD,wBAAQuB,GAAG,YAAYC,QAASlC,KAAKW,WAArC,uBAGA,mBACEsB,GAAG,cACHE,KACE,yCACAnC,KAAKM,UAAL,UACKN,KAAKQ,MAAMC,MADhB,cAC2BT,KAAKQ,MAAME,OADtC,kCAJJ,0B,GAvD2BP,IAAMC,WCE1BgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.7d49ea0e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport quotes from \"./quotes.json\";\r\nimport \"./randomizer.css\";\r\n\r\nclass Quote extends React.Component {\r\n  render() {\r\n    return <div>{this.props.randomQuote}</div>;\r\n  }\r\n}\r\n\r\nclass RandomQuoteGenerator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quote: \"\",\r\n      person: \"\",\r\n    };\r\n    this.randomizer = this.randomizer.bind(this);\r\n    this.tweetThis = this.tweetThis.bind(this);\r\n  }\r\n\r\n  randomizer() {\r\n    const QUOTES = quotes;\r\n    const QLENGTH = Object.keys(QUOTES).length - 1;\r\n    // Getting a random integer between two values, inclusive:\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values_inclusive\r\n    let position = function getRandomIntInclusive(min, max) {\r\n      return Math.floor(Math.random() * (max - min + 1) + min);\r\n    };\r\n\r\n    let randomSubArray = Object.entries(QUOTES)[position(0, QLENGTH)];\r\n    let randomPerson = randomSubArray[0];\r\n    let randomQuote = function (x) {\r\n      if (!Array.isArray(x[1])) {\r\n        return x[1];\r\n      } else {\r\n        let length = x[1].length - 1;\r\n        let randomPosition = position(0, length);\r\n        return x[1][randomPosition];\r\n      }\r\n    };\r\n    this.setState({\r\n      quote: randomQuote(randomSubArray),\r\n      person: randomPerson,\r\n    });\r\n  }\r\n\r\n  tweetThis = function (y) {\r\n    return y;\r\n  };\r\n\r\n  componentDidMount() {\r\n    return this.randomizer();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <blockquote>\r\n          <Quote id=\"text\" randomQuote={this.state.quote} />\r\n        </blockquote>\r\n        <Quote id=\"author\" randomQuote={`--${this.state.person}`} />\r\n        <button id=\"new-quote\" onClick={this.randomizer}>\r\n          New Quote\r\n        </button>\r\n        <a\r\n          id=\"tweet-quote\"\r\n          href={\r\n            \"https://twitter.com/intent/tweet?text=\" +\r\n            this.tweetThis(\r\n              `${this.state.quote} --${this.state.person} in 'The Big Lebowsky (1998)'`\r\n            )\r\n          }\r\n        >\r\n          Tweet\r\n        </a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RandomQuoteGenerator;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport RandomQuoteGenerator from \"./randomizer.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RandomQuoteGenerator />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}